Try to write it down, make yourself more clearly. 
Longest increasing subsequence, Longest Increasing Subsequence 
Here we abbreviated as LIS. 
Sorting + LCS algorithm and DP algorithm is ignored,  both too easy to understand. 

Suppose there is a sequence d [1..9] = 2 1 5 3 6 4 8 9 7, it can be seen LIS length of 5.(1,5,6,8,9 or 2,5,6,8,9) 
The following step by step, try to find it. 

We define a sequence B, then i = 1 to 9 so individually examine this sequence. 
In addition, we use a variable Len to count how many records are now up to the first, the d[1] into B in an orderly manner, 
so that B[1] = 2, that is the time when only one of a number 2, The minimum length of the end of the LIS 1 2. 
Then Len = 1 Then, d[2] in an orderly manner into B so that B[1] = 1, that is the minimum length of the end of a LIS is 1, d [1] = 2 has been useless , it is easy to understand it. 
Then Len = 1 Then, d [3] = 5, d [3]> B [1], so the order B [1 + 1] = B [2] = d [3] = 5, that is to say the length of 2 the smallest end of the LIS is 5, it is easy to understand it. 
At this time B [1..2] = 1, 5, Len = 2 again, d [4] = 3, it is just added between 1,5, is clearly inappropriate in the position 1, as a less than 3, 
The minimum length of the end of the LIS 1 should be 1, it is easy to deduce that, at the end of the length of the smallest LIS 2 is 3, 5 can be eliminated so that, 
when B [1..2] = 1, 3, Len = 2 Continue, d [5] = 6, 3 behind it, because the B [2] = 3, and 6 in the back 3, so it is easy to deduce B [3] = 6, case B [1..3] = 1, 3, 6, or very easy to understand, right? Len = 3 oh. Section 6, d [6] = 4, you see it between 3 and 6, so we can put six replaced, get B [3] = 4. B [1..3] = 1, 3, 4, Len continues to equal 3 Section 7, d [7] = 8, it is a lot more than four large, ah. Thus B [4] = 8. Len into four of the first eight, d [8] = 9, get the B [5] = 9, ah. Len continues to increase, up to 5. Last, d [9] = 7, it is B [3] = 4 and B [4] = 8 between, so we know the latest B [4] = 7, B [1..5] = 1 , 3, 4, 7, 9, Len = 5. So we know that the LIS length of 5. !!!!! Pay attention. This 1,3,4,7,9 not LIS, it just corresponds to the minimum length of storage of LIS end. With this end, we can insert data one by one. Although the last one d [9] = 7 update go for this set of data does not make sense, but if there are two numbers back then 8 and 9, then you can put 8 update to d [5], 9 update to d [6] , a length of 6 obtained LIS. 

Then should find one thing: the insertion of data in B are ordered, and is to be replaced without the need to move - that is, we can use binary search, each time a number is inserted optimized to O (logN ) ~~~~~ So the time complexity of the algorithm is reduced to O (NlogN) ~! 

Code is as follows:

int LIS ( int d [], int N) 
{ 
  int * B = new int [N]; 
  int i, left, right, mid, len = 1;     
  B[0] = d[1]; // order and above consistent, we start counting from a bar :) 
  for (i = 2; i <= N; ++ i) {         
    left = 0, right = len; 
    while (left <= right) {             
      mid = (left + right)/2; 
      if (B[mid] < d[i]) 
        left = mid + 1; // binary search d[i] insertion positions 
      else 
        right = mid - 1;         
    } 
    B[left] = d[i]; // insert 

    if (left > len) 
       len ++; // d[i] are larger than all existing numbers, so the left will be greater than len.     
  } 
  delete [] B; 
  return len; 
}



Followed the link.

http://www.programering.com/a/MjMwMTMwATU.html
http://codeforces.com/blog/entry/8798

It can be done in O(NlogN).
Lets see how.
I wont give you the longest sequence ,I will justtell you the length of longest possible sub-sequence

say we need to find LIS of the sequence 

2 4 3 6 7 3 8 9 11 10


we process our array a[] left to right and do either of these two rules:
1)stretch current max length if a[i]>last element in sequence
2)get minimum position i such that x>=a[i] and replace a[i] by x


when the first element a[0] =2 comes we have no option by to stretch(rule 1) the zero length array
//   seq[]=   2

when the second element a[1] =4 comes 4 is grater than current rightmost element of seq[] so stretch seq[](rule 1 again)
//   seq[]=   2 4

when the next element a[2] =3 comes 3 is not greater than 4 so now rule 1 is not applicable
so we have to find the least number which is atleast eqaul to or greater than 4 and replace it with 3
Thus we get:
//   seq[]=   2 3

Again 6 is greater than 3 so rule 1 again
//   seq[]=   2 3 6

Again 7>6  so rule 1 again
//   seq[]=   2 3 6 7

Now 3 not grater than 7 so rule 2 again.note 3 already exits so it goes and replaces that 3.
It doesnt stretch as we need strictly increasing sequence so it cant have two 3s
So apparently seq[] looks unchanged
//   seq[]=   2 3 6 7

Again 8>7 so rule 1 again
//   seq[]=   2 3 6 7 8

Again 9>8 so rule 1 again
//   seq[]=   2 3 6 7 8 9


Again 11>9 so rule 1 again
//   seq[]=   2 3 6 7 8 9 11

10<11 so rule 2
//   seq[]=   2 3 6 7 8 9 10

Note 

Length of this array seq[] at each stage is the maximum length found so far
but the sequence currently cached at any point is not nececerraily the  sequence of maximum length.


[code]
int a[11]={2, 4, 3, 6, 7, 3, 8, 9, 11, 10};
vector< int > sq;
vector <int >:: iterator it;
 
int main() 
{
       sq.push_back(a[0]);
       for(int i=1;i<10;i++)
       {
         if(a[i] >  *(sq.rbegin()))
         {
            sq.push_back(a[i]);
         }
         else
         {
            it = lower_bound(sq.begin(),sq.end(),a[i]);
            *it=a[i];
         }
         for(int j=0;j<sq.size();j++)cout<<sq[j]<<" ";cout<<endl;
       }
       cout<<sq.size()<<endl;
}
[/code]
